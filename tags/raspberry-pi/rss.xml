<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Brian&#x27;s Logbook - raspberry pi</title>
      <link>https://blog.brianc.me</link>
      <description>Notes, thoughts, projects and blog posts by Brian Chen</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://blog.brianc.me/tags/raspberry-pi/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Wed, 19 Mar 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>IDP - Software Documentation</title>
          <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
          <author>Brian Chen</author>
          <link>https://blog.brianc.me/projects/idp/</link>
          <guid>https://blog.brianc.me/projects/idp/</guid>
          <description xml:base="https://blog.brianc.me/projects/idp/">

&lt;div
  class=&quot;my-4 flex flex-col rounded-lg bg-[var(--admonition-bg)]&quot;
  style=&quot;--admonition-bg: rgba(0, 191, 165, 0.1);&quot;
&gt;
  &lt;div class=&quot;flex items-center rounded-t-lg bg-[var(--admonition-bg)] p-1&quot;&gt;
    &lt;div
      class=&quot;mx-2 h-4 w-4 text-[0] [background:var(--url)_center_center_no-repeat] dark:invert&quot;
      style=&quot;--url: url(.&#x2F;icons&#x2F;tip.svg);&quot;
    &gt;
      tip
    &lt;&#x2F;div&gt;
    &lt;span&gt;&lt;strong&gt;Copyright Notice&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
  &lt;div class=&quot;pl-4&quot;&gt;&lt;p&gt;This post is licensed under &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-nd&#x2F;4.0&#x2F;&quot;&gt;CC BY-NC-ND 4.0&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;


&lt;div
  class=&quot;my-4 flex flex-col rounded-lg bg-[var(--admonition-bg)]&quot;
  style=&quot;--admonition-bg: rgba(83, 211, 230, 0.1);&quot;
&gt;
  &lt;div class=&quot;flex items-center rounded-t-lg bg-[var(--admonition-bg)] p-1&quot;&gt;
    &lt;div
      class=&quot;mx-2 h-4 w-4 text-[0] [background:var(--url)_center_center_no-repeat] dark:invert&quot;
      style=&quot;--url: url(.&#x2F;icons&#x2F;info.svg);&quot;
    &gt;
      info
    &lt;&#x2F;div&gt;
    &lt;span&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;&lt;&#x2F;span&gt;
  &lt;&#x2F;div&gt;
  &lt;div class=&quot;pl-4&quot;&gt;&lt;p&gt;The UML diagrams provided below may not strictly adhere to formal UML standards, as formal UML notation is introduced in fourth year and thus is not a requirement for this project&#x27;s documentation.&lt;&#x2F;p&gt;
&lt;p&gt;They should, however, clearly and concisely reflect the structure of the project.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;diagrams&quot;&gt;Diagrams&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;class-diagram&quot;&gt;Class Diagram&lt;&#x2F;h3&gt;
&lt;pre class=&quot;mermaid bg-inherit&quot; translate=&quot;no&quot;&gt;
  
classDiagram
    class PathFinder {
        +dijkstras(start: Node, end: Node) List~Instruction~
    }

    class PicoBot {
        +move(instructions: List~Instruction~)
        +turn(is_180: bool)
        +walk()
        +pick_up(node: int)
        +drop_off(depot: int)
    }

    class MissionControl {
        +start()
        +on_bootup()
        +on_finish()
    }

    class ColorSensor {
        +get_colour() str
    }

    class LineSensor {
        +value() bool
    }

    class Motor {
        +Forward(percentage: int)
        +Reverse(percentage: int)
        +off()
    }

    class Servo {
        +rotate(angle: int)
    }

    MissionControl --&amp;gt; PathFinder : calls
    MissionControl --&amp;gt; PicoBot : commands
    PicoBot --&amp;gt; ColorSensor : reads from
    PicoBot --&amp;gt; LineSensor : reads from
    PicoBot --&amp;gt; Motor : operates
    PicoBot --&amp;gt; Servo : operates

&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;sequence-diagram&quot;&gt;Sequence Diagram&lt;&#x2F;h3&gt;
&lt;pre class=&quot;mermaid bg-inherit&quot; translate=&quot;no&quot;&gt;
  
sequenceDiagram
    actor User
    participant MC as MissionControl
    participant PF as PathFinder
    participant PB as PicoBot
    participant LS as LineSensor
    participant CS as ColorSensor
    participant M as Motor
    participant SM as Servo

    User -&amp;gt;&amp;gt; MC: Press button to start mission
    MC -&amp;gt;&amp;gt; PF: dijkstras(start, target)
    PF --&amp;gt;&amp;gt; MC: Returns list of instructions

    MC -&amp;gt;&amp;gt; PB: move(instructions)

    loop Execute each instruction
        PB -&amp;gt;&amp;gt; M: Execute TurnInstruction or WalkInstruction
        PB -&amp;gt;&amp;gt; LS: Check line sensors for line following
        LS --&amp;gt;&amp;gt; PB: Direction correction
    end

    MC -&amp;gt;&amp;gt; PB: pick_up()
    PB -&amp;gt;&amp;gt; SM: Rotate servo to pick up box
    PB -&amp;gt;&amp;gt; CS: Check color sensor
    CS --&amp;gt;&amp;gt; MC: Return detected color

    MC -&amp;gt;&amp;gt; PF: dijkstras(target, depot)
    PF --&amp;gt;&amp;gt; MC: Returns list of instructions

    MC -&amp;gt;&amp;gt; PB: move(instructions)

    loop Execute each instruction
        PB -&amp;gt;&amp;gt; M: Execute TurnInstruction or WalkInstruction
        PB -&amp;gt;&amp;gt; LS: Check line sensors for line following
        LS --&amp;gt;&amp;gt; PB: Direction correction
    end

    MC -&amp;gt;&amp;gt; PB: drop_off()
    PB -&amp;gt;&amp;gt; SM: Rotate servo to drop off box

    MC -&amp;gt;&amp;gt; MC: Loop back to step 2 with a new target node

&lt;&#x2F;pre&gt;
</description>
      </item>
    </channel>
</rss>
